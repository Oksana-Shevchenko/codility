PROGRAM:

	class Solution {
		public int solution(int[] A) {
			int size = A.length;
				
			 int count = 0;
			 int lengthOfPart = 1;

				int startPozFirst=0, startPozSecond=lengthOfPart;
				
				if (size==0) {
					return 0;
				}
				
				if (size==1) {
					return 1;
				}
				
				//while array A is splitted more than on two part
				while (lengthOfPart<size) {
					startPozFirst = 0;
					startPozSecond = lengthOfPart;
					
					for (int i=0; i<A.length; i+=lengthOfPart) {
						
						A = sortParts(startPozFirst, startPozSecond, lengthOfPart, A);
						
						startPozFirst = startPozSecond + lengthOfPart;
						startPozSecond = startPozFirst + lengthOfPart;
						if(startPozSecond >= A.length){
							break;
						}
					}
					lengthOfPart = lengthOfPart*2;
				}

				//count number of distinct values in sorted array A
				count = countDiffElements(A);
				return count;
		}
		
		
		private int[] sortParts(int startPozFirst, int startPozSecond, int length, int[] A) {
			int[] B = new int[length*2];
			int counter = 0;
			
			int i = startPozFirst; 
			int poz = startPozSecond;
			boolean isEndOfSecondArr = false;
			

			while (i<startPozSecond) {
				 //when element form second part more than from first
				 if ((A[i] > A[poz]) && (!isEndOfSecondArr)) {
					
					B[counter] = A[poz];
					counter++;

					if((poz==(A.length-1))){
						isEndOfSecondArr = true;
					}
					if ( (poz<(A.length-1))) {
						 poz++;
					}
					if((poz==(startPozSecond+length))){
						isEndOfSecondArr = true;
					}
				 } else {
					B[counter] = A[i];
					counter++;
					i++;
				 }
			}
			int end = countEndPozitionOfSecondPart(startPozSecond, length, A.length);
			
			//Rest of second part is moving 
			if (counter < (length*2)) {
				for (int j=poz; j<end; j++){
					B[counter] = A[j];
					counter++;
				}
			}
		  
			counter=0;
		   
			for(int j=startPozFirst;j<end;j++){
				A[j] = B[counter];
				counter++;
			}
			return A;
		}
		
		
		private int countEndPozitionOfSecondPart(int startPozSecond, int length, int size) {
			int end=0;
			if ((startPozSecond+length) > size) {
				end = size;
			} else {
				end = startPozSecond+length;
			}
			return end;
		}
		
		
		private int countDiffElements(int[] A) {
			int count=1;
			for (int i=1;i<A.length;i++) {
				if (A[i] != A[i-1]) {
					count++;
				}
			}
			return count;
		}
	}
	
	
TASK:

	Compute number of distinct values in an array.
	
	
FULL DESCRIPTION:

	Write a function

		class Solution { public int solution(int[] A); }
	that, given a zero-indexed array A consisting of N integers, returns the number of distinct values in array A.

	Assume that:
			N is an integer within the range [0..100,000];
			each element of array A is an integer within the range [-1,000,000..1,000,000].

	For example, given array A consisting of six elements such that:
		A[0] = 2    A[1] = 1    A[2] = 1
		A[3] = 2    A[4] = 3    A[5] = 1
	the function should return 3, because there are 3 distinct values appearing in array A, namely 1, 2 and 3.

	Complexity:
			expected worst-case time complexity is O(N*log(N));
			expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).

	Elements of input arrays can be modified.
	
	
DESCRIPTION MY:

	I used merge sorting algorithm.	
	I split array on small parts, than merge it. I used additional array B to storage sorted values from both part.