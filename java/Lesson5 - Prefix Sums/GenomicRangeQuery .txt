PROGRAM:

	class Solution {
		public int[] solution(String S, int[] P, int[] Q) {
			int[] newArr = new int[P.length];
			int[][] temp = new int[4][S.length()];
			
			
			if (S.charAt(0)=='A') {
				temp[0][0] = 1;
			}
			if (S.charAt(0)=='C') {
				temp[1][0] = 1;
			}
			if (S.charAt(0)=='G') {
				temp[2][0] = 1;
			}
			if (S.charAt(0)=='T') {
				temp[3][0] = 1;
			}
				
			for (int i=1; i<S.length(); i++) {
				
				if (S.charAt(i)=='A') {
					temp[0][i] = temp[0][i-1] + 1;
					temp[1][i] = temp[1][i-1];
					temp[2][i] = temp[2][i-1];
					temp[3][i] = temp[3][i-1];
				}
				if (S.charAt(i)=='C') {
					temp[1][i] = temp[1][i-1] + 1;
					temp[0][i] = temp[0][i-1];
					temp[2][i] = temp[2][i-1];
					temp[3][i] = temp[3][i-1];
				}
				if (S.charAt(i)=='G') {
					temp[2][i] = temp[2][i-1] + 1;
					temp[0][i] = temp[0][i-1];
					temp[1][i] = temp[1][i-1];
					temp[3][i] = temp[3][i-1];
				}
				if (S.charAt(i)=='T') {
					temp[3][i] = temp[3][i-1] + 1;
					temp[0][i] = temp[0][i-1];
					temp[1][i] = temp[1][i-1];
					temp[2][i] = temp[2][i-1];
				}
			}
			
			for (int i=0;i<P.length;i++) {
				 int fromIndex = P[i];
				 int toIndex = Q[i];
				 
				 if (fromIndex == toIndex) {
					 if (S.charAt(fromIndex) == 'A') {
						 newArr[i] = 1;
					 }
					 if (S.charAt(fromIndex) == 'C') {
						 newArr[i] = 2;
					 }
					 if (S.charAt(fromIndex) == 'G') {
						 newArr[i] = 3;
					 }
					 if (S.charAt(fromIndex) == 'T') {
						 newArr[i] = 4;
					 }
				 } else {
					 int diffA=0;
					 int diffC=0;
					 int diffG=0;
					 int diffT=0;
					 if(fromIndex!=0){
						 diffA = temp[0][fromIndex] - temp[0][fromIndex-1];
						 diffC = temp[1][fromIndex] - temp[1][fromIndex-1];
						 diffG = temp[2][fromIndex] - temp[2][fromIndex-1];
						 diffT = temp[3][fromIndex] - temp[3][fromIndex-1];
					 } else {
						 diffA=1;
						 diffC=1;
						 diffG=1;
						 diffT=1;
					 }
					 if ((temp[0][toIndex] - temp[0][fromIndex] > 0) || (temp[0][toIndex] - temp[0][fromIndex]==0 && diffA==1 && temp[0][toIndex]!=0)) {
						 newArr[i] = 1;
					 } else if ((temp[1][toIndex] - temp[1][fromIndex] > 0) || (temp[1][toIndex] - temp[1][fromIndex]==0 && diffC==1 && temp[1][toIndex]!=0)) {
						 newArr[i] = 2;
					 } else if ((temp[2][toIndex] - temp[2][fromIndex] > 0) || (temp[2][toIndex] - temp[2][fromIndex]==0 && diffG==1 && temp[2][toIndex]!=0)) {
						 newArr[i] = 3;
					 } else if ((temp[3][toIndex] - temp[3][fromIndex] > 0) || (temp[3][toIndex] - temp[3][fromIndex]==0 && diffT==1 && temp[3][toIndex]!=0)){
						 newArr[i] = 4;
					 }
				 }
			}
			return newArr;
		}
	}
	
	
TASK:

	Find the minimal nucleotide from a range of sequence DNA.

	
FULL DESCRIPTION:

	A DNA sequence can be represented as a string consisting of the letters A, C, G and T, which correspond to the types of successive nucleotides in the sequence. 
	Each nucleotide has an impact factor, which is an integer. 
	Nucleotides of types A, C, G and T have impact factors of 1, 2, 3 and 4, respectively. 
	You are going to answer several queries of the form: What is the minimal impact factor of nucleotides contained in a particular part of the given DNA sequence?

	The DNA sequence is given as a non-empty string S = S[0]S[1]...S[N-1] consisting of N characters. 
	There are M queries, which are given in non-empty arrays P and Q, each consisting of M integers. 
	The K-th query (0 <= K < M) requires you to find the minimal impact factor of nucleotides contained in the DNA sequence between positions P[K] and Q[K] (inclusive).

	For example, consider string S = CAGCCTA and arrays P, Q such that:
		P[0] = 2 Q[0] = 4
		P[1] = 5 Q[1] = 5 
		P[2] = 0 Q[2] = 6

	The answers to these M = 3 queries are as follows:
			The part of the DNA between positions 2 and 4 contains nucleotides G and C (twice), whose impact factors are 3 and 2 respectively, so the answer is 2.
			The part between positions 5 and 5 contains a single nucleotide T, whose impact factor is 4, so the answer is 4.
			The part between positions 0 and 6 (the whole string) contains all nucleotides, in particular nucleotide A whose impact factor is 1, so the answer is 1.

	Write a function:
		class Solution { public int[] solution(String S, int[] P, int[] Q); }

	that, given a non-empty zero-indexed string S consisting of N characters and two non-empty zero-indexed arrays P and Q consisting of M integers, returns an array consisting of M integers specifying the consecutive answers to all queries.

	The sequence should be returned as:
			a Results structure (in C), or
			a vector of integers (in C++), or
			a Results record (in Pascal), or
			an array of integers (in any other programming language).

	For example, given the string S = CAGCCTA and arrays P, Q such that:
		P[0] = 2 Q[0] = 4 
		P[1] = 5 Q[1] = 5 
		P[2] = 0 Q[2] = 6

	the function should return the values [2, 4, 1], as explained above.

	Assume that:
			N is an integer within the range [1..100,000];
			M is an integer within the range [1..50,000];
			each element of arrays P, Q is an integer within the range [0..N ? 1];
			P[K] ? Q[K], where 0 ? K < M;
			string S consists only of upper-case English letters A, C, G, T.

	Complexity:
			expected worst-case time complexity is O(N+M);
			expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).

	Elements of input arrays can be modified.
