PROGRAM:


	class Solution {
		public int solution (int A, int B, int K) {
			int rezult = 0;
			
			//A=10, B=10, K=5 (rez = 1)
			if (A == B) {
				if (A%K == 0) {
					return 1;
				} else {
					return 0;
				}
			}
			
			if (A>B || K<1) {
				return 0;
			}
			
			if (K == 1) {
				return B-A+1;
			}
			
			//A=11, B=345, K=17 (rez = 20)
			if (K>A && K<=B) {
				rezult = (B - K)/K+1;
			} else {
				rezult = (B - A)/K;
			}

			if (A%K == 0 || B%K == 0) {
				return rezult+1;
			}
			return rezult;
		}
	}
	
	
TASK:

	Compute number of integers divisible by k in range [a..b].

	
FULL DESCRIPTION:


	Write a function:
		class Solution { public int solution(int A, int B, int K); }

	that, given three integers A, B and K, returns the number of integers within the range [A..B] that are divisible by K, i.e.:
    { i : A <= i <= B, i mod K = 0 }

	For example, for A = 6, B = 11 and K = 2, your function should return 3, because there are three numbers divisible by 2 within the range [6..11], namely 6, 8 and 10.

	Assume that:
        A and B are integers within the range [0..2,000,000,000];
        K is an integer within the range [1..2,000,000,000];
        A <= B.

	Complexity:
        expected worst-case time complexity is O(1);
        expected worst-case space complexity is O(1).

